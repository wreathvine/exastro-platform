{{/*
#   Copyright 2022 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
*/}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: params-{{ template "platform-setup.name" . }}
  namespace: {{ .Release.Namespace }}
  labels: {{ include "platform-setup.labels" . | nindent 4 }}
data: {{ toYaml .Values.extraEnv | nindent 2 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysqld-conf
  namespace: {{ .Release.Namespace }}
  labels: {{ include "platform-setup.labels" . | nindent 4 }}
data:
  custom.cnf: |- {{- .Values.database.databaseConfig.customCnf | nindent 4 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: createdb-sql
  namespace: {{ .Release.Namespace }}
  labels: {{ include "platform-setup.labels" . | nindent 4 }}
data:
    createdb.sql: |-
      {{- with .Values.global.keycloakDefinition }}
      CREATE DATABASE IF NOT EXISTS `{{ .config.KEYCLOAK_DB_DATABASE }}` CHARACTER SET utf8 COLLATE utf8_general_ci;
      CREATE USER IF NOT EXISTS '{{ .secret.KEYCLOAK_DB_USER }}'@'%' IDENTIFIED BY '{{ .secret.KEYCLOAK_DB_PASSWORD }}';
      GRANT ALL PRIVILEGES ON `{{ .config.KEYCLOAK_DB_DATABASE }}` . * TO '{{ .secret.KEYCLOAK_DB_USER }}'@'%';
      FLUSH PRIVILEGES;
      {{- end -}}

      {{- with .Values.global.authDatabaseDefinition }}
      CREATE DATABASE IF NOT EXISTS `{{ .config.DB_DATABASE }}` CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
      CREATE USER IF NOT EXISTS '{{ .secret.DB_USER }}'@'%' IDENTIFIED BY '{{ .secret.DB_PASSWORD }}';
      GRANT ALL PRIVILEGES ON `{{ .config.DB_DATABASE }}` . * TO '{{ .secret.DB_USER }}'@'%';
      FLUSH PRIVILEGES;

      CREATE TABLE IF NOT EXISTS `{{ .config.DB_DATABASE }}`.`T_ORGANIZATION`
      (
        ORGANIZATION_ID VARCHAR(36) NOT NULL,
        ORGANIZATION_NAME VARCHAR(255) NOT NULL,
        INFORMATIONS JSON NOT NULL,
        CREATE_TIMESTAMP DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CREATE_USER VARCHAR(40),
        LAST_UPDATE_TIMESTAMP DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        LAST_UPDATE_USER VARCHAR(40),
        PRIMARY KEY (ORGANIZATION_ID)
      );

      CREATE TABLE IF NOT EXISTS `{{ .config.DB_DATABASE }}`.`T_ORGANIZATION_DB`
      (
        ORGANIZATION_ID VARCHAR(36) NOT NULL,
        DB_HOST VARCHAR(255),
        DB_PORT INT,
        DB_DATABASE VARCHAR(255),
        DB_USER VARCHAR(255),
        DB_PASSWORD VARCHAR(255),
        CREATE_TIMESTAMP DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CREATE_USER VARCHAR(40),
        LAST_UPDATE_TIMESTAMP DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        LAST_UPDATE_USER VARCHAR(40),
        PRIMARY KEY (ORGANIZATION_ID)
      );

      CREATE TABLE IF NOT EXISTS `{{ .config.DB_DATABASE }}`.`T_PLATFORM_PRIVATE`
      (
        ID INT NOT NULL,
        INFORMATIONS JSON NOT NULL,
        CREATE_TIMESTAMP DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CREATE_USER VARCHAR(40),
        LAST_UPDATE_TIMESTAMP DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        LAST_UPDATE_USER VARCHAR(40),
        PRIMARY KEY (ID)
      );

      CREATE TABLE IF NOT EXISTS `{{ .config.DB_DATABASE }}`.`T_ORGANIZATION_PLAN`
      (
        ORGANIZATION_ID VARCHAR(36) NOT NULL,
        START_TIMESTAMP DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
        PLAN_ID VARCHAR(36) NOT NULL,
        CREATE_TIMESTAMP DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CREATE_USER VARCHAR(40),
        LAST_UPDATE_TIMESTAMP DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        LAST_UPDATE_USER VARCHAR(40),
        PRIMARY KEY (ORGANIZATION_ID, START_TIMESTAMP)
      );

      CREATE TABLE IF NOT EXISTS `{{ .config.DB_DATABASE }}`.`T_PLAN`
      (
        PLAN_ID VARCHAR(36) NOT NULL,
        PLAN_NAME VARCHAR(255) NOT NULL,
        INFORMATIONS JSON NOT NULL,
        CREATE_TIMESTAMP DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CREATE_USER VARCHAR(40),
        LAST_UPDATE_TIMESTAMP DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        LAST_UPDATE_USER VARCHAR(40),
        PRIMARY KEY (PLAN_ID)
      );

      CREATE TABLE IF NOT EXISTS `{{ .config.DB_DATABASE }}`.`T_PLAN_ITEM`
      (
        LIMIT_ID VARCHAR(255) NOT NULL,
        INFORMATIONS JSON NOT NULL,
        CREATE_TIMESTAMP DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CREATE_USER VARCHAR(40),
        LAST_UPDATE_TIMESTAMP DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        LAST_UPDATE_USER VARCHAR(40),
        PRIMARY KEY (LIMIT_ID)
      );

      CREATE TABLE IF NOT EXISTS `{{ .config.DB_DATABASE }}`.`T_PLAN_LIMIT`
      (
        PLAN_ID VARCHAR(36) NOT NULL,
        LIMIT_ID VARCHAR(255) NOT NULL,
        LIMIT_VALUE INT NOT NULL,
        CREATE_TIMESTAMP DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CREATE_USER VARCHAR(40),
        LAST_UPDATE_TIMESTAMP DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        LAST_UPDATE_USER VARCHAR(40),
        PRIMARY KEY (PLAN_ID, LIMIT_ID)
      );

      /* plan values */
      INSERT INTO `{{ .config.DB_DATABASE }}`.`T_PLAN_ITEM` (LIMIT_ID, INFORMATIONS, CREATE_USER, LAST_UPDATE_USER) VALUES ('platform.workspaces', '{\"description\": \"default limit\", \"max\": 1000}', 'system', 'system');
      INSERT INTO `{{ .config.DB_DATABASE }}`.`T_PLAN_ITEM` (LIMIT_ID, INFORMATIONS, CREATE_USER, LAST_UPDATE_USER) VALUES ('platform.roles', '{\"description\": \"default limit\", \"max\": 1000}', 'system', 'system');
      INSERT INTO `{{ .config.DB_DATABASE }}`.`T_PLAN_ITEM` (LIMIT_ID, INFORMATIONS, CREATE_USER, LAST_UPDATE_USER) VALUES ('platform.users', '{\"description\": \"default limit\", \"max\": 10000}', 'system', 'system');
      INSERT INTO `{{ .config.DB_DATABASE }}`.`T_PLAN` (PLAN_ID, PLAN_NAME, INFORMATIONS, CREATE_USER, LAST_UPDATE_USER) VALUES ('_default', '_default plan', '{\"description\": \"default plan\"}', 'system', 'system');
      INSERT INTO `{{ .config.DB_DATABASE }}`.`T_PLAN_LIMIT` (PLAN_ID, LIMIT_ID, LIMIT_VALUE, CREATE_USER, LAST_UPDATE_USER) VALUES ('_default', 'platform.workspaces', 100, 'system', 'system');
      INSERT INTO `{{ .config.DB_DATABASE }}`.`T_PLAN_LIMIT` (PLAN_ID, LIMIT_ID, LIMIT_VALUE, CREATE_USER, LAST_UPDATE_USER) VALUES ('_default', 'platform.roles', 1000, 'system', 'system');
      INSERT INTO `{{ .config.DB_DATABASE }}`.`T_PLAN_LIMIT` (PLAN_ID, LIMIT_ID, LIMIT_VALUE, CREATE_USER, LAST_UPDATE_USER) VALUES ('_default', 'platform.users', 10000, 'system', 'system');
      /* plan values */
      {{- end -}}
